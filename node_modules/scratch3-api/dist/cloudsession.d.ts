/// <reference types="node" />
import EventEmitter from "events";
import WebSocket from "ws";
import UserSession from "./usersession";
import { AnyObject } from "./defs";
/**
 * ClousSession API.
 * @extends EventEmitter
 * @property {UserSession} user - UserSession that the CloudSession was created with.
 * @property {number|string} id - The id of the project that the CloudSession is connecting to.
 * @property {object} variables - Project variables.
 */
declare class CloudSession extends EventEmitter {
    variables: AnyObject;
    _variables: AnyObject;
    attemptedPackets: string[];
    user: UserSession;
    id: number;
    usetw: boolean;
    connection: WebSocket;
    /**
     * @param user - The UserSession to create the CloudSession with.
     * @param proj - The ID of the project to connect to.
     */
    constructor(user: UserSession, proj: number | string, turbowarp?: boolean);
    private handlePacket;
    private sendHandshake;
    private sendSet;
    private send;
    private sendPacket;
    private addVariable;
    /**
     * Create a new, connected CloudSession.
     * @async
     * @param {UserSession} user - The UserSession to create the CloudSession with.
     * @param {number|string} proj - The ID of the project to connect to.
     * @returns {CloudSession} A loaded CloudSession.
     */
    static create(user: UserSession, proj: number | string, turbowarp: boolean): Promise<CloudSession>;
    /**
     * Connect the CloudSession to the Scratch Server.
     * @fires CloudSession#reset
     * @fires CloudSession#set
     */
    connect(): Promise<void>;
    /**
     * End the WebSocket connection.
     */
    end(): void;
    /**
     * Get the value of a variable.
     * @param {string} n - The name of the variable.
     * @returns {string} The variable's value.
     */
    get(n: string): number | string;
    /**
     * Set a cloud variable in the project.
     * @param {string} n - The name of the variable.
     * @param {number|string} v - The value to set the variable to.
     */
    set(n: string, v: number | string): void;
    /**
     * Add the "‚òÅ" symbol to a name.
     * @param {string} n - The name of the variable.
     * @returns {string}
     */
    name(n: string): string;
    /**
     * Convert a string to a sequence of numbers that can be stored in a cloud variable.
     * @param {string} [s=""] - The string to convert.
     * @returns {string} A sequence of numbers representing the input string.
     */
    numerify(str?: string): string;
    /**
     * Cinvert a sequence of numbers into the represented string.
     * @param {string|number} [n=""] - The number to convert.
     * @param {number} l - The letter of the input number to start the conversion at.
     * @returns {string} The converted string.
     */
    stringify(num: number | string, startLetter?: number): string;
}
export default CloudSession;
