"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJSON = exports.request = void 0;
const https_1 = __importDefault(require("https"));
const request = function (o) {
    return __awaiter(this, void 0, void 0, function* () {
        let h = {
            Cookie: "scratchcsrftoken=a; scratchlanguage=en;",
            "X-CSRFToken": "a",
            referer: "https://scratch.mit.edu"
        };
        if (typeof o === "object" && o && o.headers) {
            for (let p in o.headers) {
                h[p] = o.headers[p];
            }
            if (o.body) {
                h["Content-Length"] = Buffer.byteLength(o.body);
            }
            if (o.sessionId) {
                h.Cookie += "scratchsessionsid=" + o.sessionId + ";";
            }
        }
        let p = new Promise(function (resolve) {
            let r = https_1.default.request({
                hostname: o.hostname || "scratch.mit.edu",
                port: 443,
                path: o.path,
                method: o.method || "GET",
                headers: h
            }, function (res) {
                let p = [];
                res.on("data", function (c) {
                    return p.push(c);
                });
                res.on("end", function () {
                    return resolve([null, Buffer.concat(p).toString(), res]);
                });
            });
            r.on("error", resolve);
            if (o.body) {
                r.write(o.body);
            }
            r.end();
        });
        return yield p;
    });
};
exports.request = request;
const getJSON = function (o) {
    return __awaiter(this, void 0, void 0, function* () {
        let [, b] = yield request(o);
        return JSON.parse(b);
    });
};
exports.getJSON = getJSON;
