"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_js_1 = require("./request.js");
class Conference {
    scheduleForDay(day, zidx = true) {
        return __awaiter(this, void 0, void 0, function* () {
            let days = [
                "Saturday",
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday"
            ].map(function (day) {
                return day.toLowerCase();
            });
            let d = (function () {
                switch (typeof day) {
                    case "string":
                        if (days.includes(day)) {
                            return day;
                        }
                        else {
                            throw new Error("Invalid day of week");
                        }
                    case "number":
                        if (Math.floor(day) !== day)
                            throw new Error("Day of week must be an integer");
                        if (zidx) {
                            if (day < 6 && day >= 0) {
                                return days[day];
                            }
                            throw new Error(`${day} is not a valid day of the week`);
                        }
                        else {
                            if (day < 7 && day >= 1) {
                                return days[day - 1];
                            }
                            throw new Error(`${day} is not a valid day of the week`);
                        }
                }
            })();
            return yield (0, request_js_1.getJSON)({
                hostname: "api.scratch.mit.edu",
                path: `/conference/schedule/${d}`
            });
        });
    }
    detailsFor(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, request_js_1.getJSON)({
                hostname: "api.scratch.mit.edu",
                path: `/conference/${id}/details`
            });
        });
    }
}
class Users {
    get(username) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, request_js_1.getJSON)({
                hostname: "api.scratch.mit.edu",
                path: `/users/${username}`
            });
        });
    }
    getFollowing(username) {
        return __awaiter(this, void 0, void 0, function* () {
            let following = [];
            let offset = 0;
            while (true) {
                let batch = yield (0, request_js_1.getJSON)({
                    hostname: "api.scratch.mit.edu",
                    path: `/users/${username}/following?limit=40&offset=${offset}`
                });
                following = following.concat(Array.isArray(batch) ? batch : []);
                if (batch.length < 40) {
                    return following;
                }
                offset += 40;
            }
        });
    }
    getFollowers(username) {
        return __awaiter(this, void 0, void 0, function* () {
            let followers = [];
            let offset = 0;
            while (true) {
                let batch = yield (0, request_js_1.getJSON)({
                    hostname: "api.scratch.mit.edu",
                    path: `/users/${username}/followers?limit=40&offset=${offset}`
                });
                followers = followers.concat(batch);
                if (batch.length < 40) {
                    return followers;
                }
                offset += 40;
            }
        });
    }
}
const Rest = {
    Conference: new Conference(),
    Users: new Users(),
    getHealth: function () {
        return (0, request_js_1.getJSON)({
            hostname: "api.scratch.mit.edu",
            path: "/health"
        });
    },
    getNews: function () {
        return (0, request_js_1.getJSON)({
            hostname: "api.scratch.mit.edu",
            path: "/news"
        });
    }
};
exports.default = Rest;
